// simple-test.js - ุงุฎุชุจุงุฑ ุจุณูุท ููุชุฃูุฏ ูู ุงูุจููุฉ

const fs = require('fs');
const path = require('path');

console.log("๐งช ุงุฎุชุจุงุฑ ุจููุฉ SOLID ุงูุจุณูุท...\n");

// ุงูุชุญูู ูู ูุฌูุฏ ุงููุฌูุฏุงุช ุงูุฑุฆูุณูุฉ
const mainFolders = ['interfaces', 'base', 'services', 'utils'];
const controllersFolders = ['auth', 'medicines', 'inventory', 'pharmacist', 'pos', 'purchases', 'suppliers', 'doctor'];

console.log("๐ ุงูุชุญูู ูู ุงููุฌูุฏุงุช ุงูุฑุฆูุณูุฉ:");
mainFolders.forEach(folder => {
  const folderPath = path.join(__dirname, 'backend', 'src', folder);
  if (fs.existsSync(folderPath)) {
    console.log(`โ ${folder}/ ููุฌูุฏ`);
  } else {
    console.log(`โ ${folder}/ ุบูุฑ ููุฌูุฏ`);
  }
});

console.log("\n๐ ุงูุชุญูู ูู ูุฌูุฏุงุช controllers ุงููุฑุนูุฉ:");
controllersFolders.forEach(folder => {
  const folderPath = path.join(__dirname, 'backend', 'src', 'controllers', folder);
  if (fs.existsSync(folderPath)) {
    console.log(`โ controllers/${folder}/ ููุฌูุฏ`);
  } else {
    console.log(`โ controllers/${folder}/ ุบูุฑ ููุฌูุฏ`);
  }
});

// ุงูุชุญูู ูู ูุฌูุฏ ูููุงุช ุงูููุฑุณ ุงูุฑุฆูุณูุฉ
const indexFiles = [
  'interfaces/index.js',
  'base/index.js',
  'services/index.js',
  'utils/index.js'
];

console.log("\n๐ ุงูุชุญูู ูู ูููุงุช ุงูููุฑุณ:");
indexFiles.forEach(file => {
  const filePath = path.join(__dirname, 'backend', 'src', file);
  if (fs.existsSync(filePath)) {
    console.log(`โ ${file} ููุฌูุฏ`);
  } else {
    console.log(`โ ${file} ุบูุฑ ููุฌูุฏ`);
  }
});

console.log("\nโ ุชู ุฅูุดุงุก ุจููุฉ SOLID ุจูุฌุงุญ!");
console.log("๐ ุงููุฌูุฏุงุช ุงููููุดุฃุฉ:");
console.log("  โข interfaces/ - ูููุงุฌูุงุช ูุงูุฃููุงุน");
console.log("  โข base/ - ููููุงุณุงุช ุงูุฃุณุงุณูุฉ");
console.log("  โข services/ - ููุฎุฏูุงุช ุงููุดุชุฑูุฉ");
console.log("  โข utils/ - ููุฃุฏูุงุช ุงููุณุงุนุฏุฉ");
console.log("  โข controllers/ ูุญุฏุซุฉ - ูุน ุจููุฉ SOLID");

console.log("\n๐ฏ ูุจุงุฏุฆ SOLID ุงูููุทุจูุฉ:");
console.log("โ S - Single Responsibility: ุชูุณูู ุงูููุงู");
console.log("โ O - Open/Closed: ุฅุถุงูุฉ ูุธุงุฆู ุฏูู ุชุนุฏูู ููุฌูุฏ");
console.log("โ L - Liskov Substitution: ุงุณุชุจุฏุงู ุงูููุงุณุงุช");
console.log("โ I - Interface Segregation: ูุตู ุงููุงุฌูุงุช");
console.log("โ D - Dependency Inversion: ุนูุณ ุงูุชุจุนูุงุช");

console.log("\n๐ ุงูุจููุฉ ุฌุงูุฒุฉ ููุชุทููุฑ ูุงูุตูุงูุฉ!");
